# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
#    - name: Cache Maven packages
#      uses: actions/cache@v3.0.4
#      with:
#        # A list of files, directories, and wildcard patterns to cache and restore
#        path: ~/.m2
#        # An explicit key for restoring and saving the cache
#        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#        # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
#        restore-keys: ${{ runner.os }}-m2
#        upload-chunk-size: # optional
    - name: Build with Maven
      run: mvn  package --file pom.xml
    - name: Upload output jar
      uses: actions/upload-artifact@v3
      with:
        name: jar
        path: target/microservices-demo-2.1.0.RELEASE.jar
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
#      - name: Cache Maven packages
#        uses: actions/cache@v3.0.4
#        with:
#          # A list of files, directories, and wildcard patterns to cache and restore
#          path: ~/.m2
#          # An explicit key for restoring and saving the cache
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
#          restore-keys: ${{ runner.os }}-m2
#          upload-chunk-size: # optional
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: jar
      - name: JUnit tests
        run: echo "passed!"
      - name: Integration tests
        run: echo "passed!"
      - name: Performance tests
        run: echo "passed!"
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: jar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: wangjifeng/microservices-demo:${{github.SHA}}