# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: autopilot-cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
#    - name: Cache Maven packages
#      uses: actions/cache@v3.0.4
#      with:
#        # A list of files, directories, and wildcard patterns to cache and restore
#        path: ~/.m2
#        # An explicit key for restoring and saving the cache
#        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#        # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
#        restore-keys: ${{ runner.os }}-m2
#        upload-chunk-size: # optional
    - name: Build with Maven
      run: mvn  package --file pom.xml
    - name: Upload output jar
      uses: actions/upload-artifact@v3
      with:
        name: jar
        path: target/microservices-demo-2.1.0.RELEASE.jar
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
#      - name: Cache Maven packages
#        uses: actions/cache@v3.0.4
#        with:
#          # A list of files, directories, and wildcard patterns to cache and restore
#          path: ~/.m2
#          # An explicit key for restoring and saving the cache
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
#          restore-keys: ${{ runner.os }}-m2
#          upload-chunk-size: # optional
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: jar
      - name: JUnit tests
        run: echo "passed!"
      - name: Integration tests
        run: echo "passed!"
      - name: Performance tests
        run: echo "passed!"
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: jar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: wangjifeng/microservices-demo:${{github.SHA}}
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: tests
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: jar
      # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/128800873631/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider'
          service_account: 'github-action@kk2022.iam.gserviceaccount.com'

      # Alternative option - authentication via credentials json
      # - id: 'auth'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
